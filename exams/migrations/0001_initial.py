# Generated by Django 4.2.7 on 2025-08-23 19:12

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('course_id', models.AutoField(primary_key=True, serialize=False)),
                ('course_name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'db_table': 'courses',
            },
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('exam_id', models.AutoField(primary_key=True, serialize=False)),
                ('exam_title', models.CharField(max_length=255)),
                ('time_limit', models.IntegerField(help_text='Time limit in minutes')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exams', to='exams.course')),
            ],
            options={
                'verbose_name': 'Exam',
                'verbose_name_plural': 'Exams',
                'db_table': 'exams',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_id', models.AutoField(primary_key=True, serialize=False)),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False')], max_length=20)),
                ('option_a', models.CharField(blank=True, max_length=500)),
                ('option_b', models.CharField(blank=True, max_length=500)),
                ('option_c', models.CharField(blank=True, max_length=500)),
                ('option_d', models.CharField(blank=True, max_length=500)),
                ('correct_answer', models.CharField(max_length=10)),
                ('sort_order', models.IntegerField(default=0)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='exams.exam')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'db_table': 'questions',
                'ordering': ['sort_order', 'question_id'],
            },
        ),
        migrations.CreateModel(
            name='UserExam',
            fields=[
                ('user_exam_id', models.AutoField(primary_key=True, serialize=False)),
                ('assigned_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('due_date', models.DateTimeField()),
                ('attempts_allowed', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_assignments', to='exams.exam')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_exams', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Exam Assignment',
                'verbose_name_plural': 'User Exam Assignments',
                'db_table': 'userexams',
                'unique_together': {('user', 'exam')},
            },
        ),
        migrations.CreateModel(
            name='ExamSession',
            fields=[
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('session_data', models.TextField(default='{}', help_text='JSON data storing current answers')),
                ('is_submitted', models.BooleanField(default=False)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exams.exam')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_sessions', to='exams.userexam')),
            ],
            options={
                'verbose_name': 'Exam Session',
                'verbose_name_plural': 'Exam Sessions',
                'db_table': 'examsessions',
            },
        ),
        migrations.CreateModel(
            name='UserHistory',
            fields=[
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('answer_given', models.CharField(max_length=10)),
                ('is_correct', models.BooleanField()),
                ('attempt_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='exams.question')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answer_history', to='exams.examsession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Answer History',
                'verbose_name_plural': 'User Answer History',
                'db_table': 'userhistory',
                'unique_together': {('session', 'question')},
            },
        ),
    ]
